{"version":3,"sources":["reset.styl","base.styl","../node_modules/rupture/rupture/index.styl","card.styl","mixins.styl","intro.styl","content.styl"],"names":[],"mappings":"AAKA,KAAM,KAAM,IAAK,KAAM,OAAQ,OAAQ,OAAO,GACK,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,WAAY,IAAI,EACI,KAAM,QAAS,QAAS,IAAK,KAAM,KAAK,IACM,IAAK,GAAI,IAAK,IAAK,IAAK,EAAG,EAAG,KAAK,MACQ,OAAQ,OAAQ,IAAK,IAAK,GAAI,IAAI,EACI,EAAG,EAAG,OAAO,GACK,GAAI,GAAI,GAAI,GAAI,GAAG,SACW,KAAM,MAAO,OAAO,MACQ,QAAS,MAAO,MAAO,MAAO,GAAI,GAAI,GAAG,QACU,MAAO,OAAQ,QAAS,MAAM,OACS,WAAY,OAAQ,OAAQ,OAAO,KACO,IAAK,OAAQ,KAAM,QAAS,QAAQ,KACO,KAAM,MAAO,MACne,OAAO,EACP,QAAQ,EACV,SACA,eACA,aACA,wBAGA,QAAS,MAAO,QAAS,WAAY,OAAO,OACS,OAAQ,OAAQ,KAAM,IAAK,QAC9E,QAAQ,MAEV,KACE,YAAY,EAEd,GAAI,GACF,WAAW,KAEb,WAAY,EACV,OAAO,KAET,iBAAkB,gBAAgB,QACU,OAC1C,QAAQ,GACR,QAAQ,KAEV,MACE,gBAAgB,SAChB,eAAe,EC9CjB,KACE,YAAkB,mDAClB,WAAW,OACX,2BAA2B,MAE7B,EACE,YAAY,IAGZ,EACA,UACA,QACA,QACA,SACE,MAAM,UACN,YAAY,IACZ,gBAAgB,KAClB,QACE,gBAAgB,UAGpB,KACE,QAAQ,OCyHC,yCAAA,KDvHP,QAAQ,MExBZ,MACE,SAAS,SACT,iBAAiB,KACjB,OAAO,kBACP,OAAO,QCGP,OAAsB,qBACtB,MAAoB,MDQpB,OAAO,YD+HE,yCAAA,MExIT,OAAsB,MACtB,MAAoB,OFuIX,yCAAA,MExIT,OAAsB,MACtB,MAAoB,OFuIX,0CAAA,MExIT,OAAsB,qBACtB,MAAoB,ODSpB,iBACE,OAAO,ED6HA,yCAAA,MC3HP,OAAO,WACP,sBACE,OAAO,eDyHF,gEAAA,MCvHP,OAAO,WACP,sBACE,OAAO,eAEX,eACE,SAAS,SACT,IAAI,EACJ,KAAK,EACL,OAAO,EACP,MAAM,EACN,QAAQ,KACR,gBAAgB,OAChB,YAAY,OACZ,iBAAiB,MAEjB,qBACE,MAAM,QACN,eAAe,UACf,UAAU,KACV,YAAY,IAGd,2BACE,QAAQ,KAEZ,aACE,eAAe,KACf,SAAS,OEnDb,QACE,QAAQ,UACR,QAAQ,KACR,gBAAgB,OAChB,YAAY,OACZ,eAAe,OACf,iBAAiB,QACjB,MAAM,MHwIG,yCAAA,QGtIP,QAAQ,EDIV,MAA4D,mCCF1D,SAAS,MACT,IAAI,EACJ,KAAK,EACL,OAAO,GHiIA,0CAAA,QElIT,MAA4D,oCCK9D,SACE,iBAAiB,KACjB,MAAM,MACN,OAAO,MACP,cAAc,MHyHL,yCAAA,SGvHP,MAAM,MACN,OAAO,MACP,cAAc,MHqHP,yCAAA,SGnHP,MAAM,MACN,OAAO,MACP,cAAc,OAElB,QACE,YAAY,MH8GH,yCAAA,QG5GP,YAAY,MH4GL,yCAAA,QG1GP,YAAY,MAEhB,SACE,UAAU,OACV,YAAY,MHsGH,yCAAA,SGpGP,YAAY,MC3ChB,SACE,QAAQ,OACR,QAAQ,KACR,UAAU,KACV,eAAe,IACf,gBAAgB,QJ0IP,yCAAA,SIxIP,QAAQ,EFQV,MAAgD,4BEN9C,SAAS,SACT,IAAI,EACJ,MAAM,EACN,OAAO,GJmIA,0CAAA,SEhIT,MAAgD,6BEClD,UACE,OAAO,KACP,MAAM,KACN,QAAQ,KACR,gBAAgB,OAChB,QAAQ,QJ0HC,yCAAA,UIxHP,OAAO,MACP,QAAQ,QACV,iBACE,OAAO","file":"styles.css","sourcesContent":["/* http//meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video\n  margin 0\n  padding 0\nborder 0\nfont-size 100%\nfont inherit\nvertical-align baseline\n\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section\n  display block\n\nbody\n  line-height 1\n\nol, ul\n  list-style none\n\nblockquote, q\n  quotes none\n\nblockquotebefore, blockquoteafter,\nqbefore, qafter\n  content ''\n  content none\n\ntable\n  border-collapse collapse\n  border-spacing 0","body\n  font-family Boston,'Helvetica Neue',Helvetica,Arial,sans-serif\n  overflow-y scroll\n  -webkit-overflow-scrolling touch\n\np\n  font-weight 300\n\na\n  &\n  &:visited\n  &:hover\n  &:focus\n  &:active\n    color sharkGrey\n    font-weight 700\n    text-decoration none\n  &:hover\n    text-decoration underline\n\n// layout\nbody\n  display block\n  +above('desktop')\n    display flex","base-font-size ?= 16px\nrasterise-media-queries ?= false\n\nrupture = {\n  rasterise-media-queries: rasterise-media-queries\n  mobile-cutoff: 400px\n  desktop-cutoff: 1050px\n  hd-cutoff: 1800px\n  enable-em-breakpoints: false\n  base-font-size: base-font-size\n  anti-overlap: false\n  density-queries: 'dppx' 'webkit' 'moz' 'dpi'\n  retina-density: 1.5\n  use-device-width: false\n}\nrupture.scale = 0 (rupture.mobile-cutoff) 600px 800px (rupture.desktop-cutoff) (rupture.hd-cutoff)\nrupture.scale-names = 'xs' 's' 'm' 'l' 'xl' 'hd'\n\n-is-string(val)\n  if typeof(val) is not 'unit'\n    if val is a 'string' or val is a 'ident'\n      true\n    else\n      false\n  else\n    false\n\n-get-scale-number(scale-name)\n  for list-item, i in rupture.scale-names\n    if list-item is scale-name\n      return i + 1\n  return false\n\n-convert-to(to-unit, value, context = rupture.base-font-size)\n  from-unit = unit(value)\n  return value if to-unit is from-unit\n  if to-unit in ('em' 'rem')\n    return value if from-unit in ('em' 'rem')\n    return unit((value / context), to-unit)\n  if to-unit is 'px'\n    return unit((value * context), 'px')\n\n-on-scale(n)\n  return unit(n) is ''\n\n-larger-than-scale(n)\n  return (n > (length(rupture.scale) - 1)) and -on-scale(n)\n\n-is-zero(n)\n  return n is 0\n\n-overlap-shift(anti-overlap, n)\n  shift-unit = unit(n)\n  anti-overlap = 0px unless anti-overlap\n  anti-overlap = 1px if anti-overlap is true\n  if length(anti-overlap) is 1\n    return -convert-to(shift-unit, anti-overlap)\n  for val in anti-overlap\n    return val if unit(val) is shift-unit\n\n-adjust-overlap(anti-overlap, n, side = 'min')\n  -shift = -overlap-shift(anti-overlap, n)\n  if (side is 'min' and -shift > 0) or (side is 'max' and -shift < 0)\n    n = n + -shift\n  return n\n\n-is-positive(n)\n  return n >= 0\n\n-density-queries(density)\n  if typeof(density) is not 'unit'\n    if not -is-string(density)\n      density = '%s' % density\n  density = rupture.retina-density if density is 'retina'\n  queries = ()\n  for query in rupture.density-queries\n    if query is 'webkit'\n      push(queries, '(-webkit-min-device-pixel-ratio: %s)' % (density))\n    else if query is 'moz'\n      push(queries, '(min--moz-device-pixel-ratio: %s)' % (density))\n    else if query is 'o'\n      push(queries, '(-o-min-device-pixel-ratio: %s/1)' % (density))\n    else if query is 'ratio'\n      push(queries, '(min-device-pixel-ratio: %s)' % (density))\n    else if query is 'dpi'\n      if -is-string(density)\n        density=convert(density)\n      push(queries, '(min-resolution: %sdpi)' % (round(density * 96, 1)))\n    else if query is 'dppx'\n      push(queries, '(min-resolution: %sdppx)' % (density))\n  return queries\n\ncreate-fallback-class(selected, class)\n  /{'' + class + ' ' + selected}\n    {block}\n\n// +between(min, max)\n// usage (scale can be mixed with custom values):\n//   - +between(1, 3) scale:scale\n//   - +between(0, 3) 0 width:scale\n//   - +between(200px, 500px) custom:custom\n//   - +between(0, 300px) 0 width:custom\n//   - +between(1, 300px) scale:custom\n//   - +between(200px, 4) custom:scale\n\nbetween(min, max, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  selected = selector()\n\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  if -is-string(min)\n    min = -get-scale-number(min)\n  if -is-string(max)\n    max = -get-scale-number(max)\n\n  -min = rupture.scale[min - 1] unless -is-zero(min) or (not -on-scale(min))\n  -max = rupture.scale[max] unless not -on-scale(max)\n  -min ?= min\n  -max ?= max\n\n  if (rupture.rasterise-media-queries)\n    if not (density or -max or orientation)\n      {block}\n  else\n    condition = 'only screen'\n    use-device-width = use-device-width ? 'device-' : ''\n    unless -min is 0\n      -min = -convert-to('em', -min) if rupture.enable-em-breakpoints\n      -min = -adjust-overlap(anti-overlap, -min, side: 'min')\n      condition = condition + ' and (min-' + use-device-width + 'width: %s)' % (-min)\n    unless -larger-than-scale(max)\n      -max = -convert-to('em', -max) if rupture.enable-em-breakpoints\n      -max = -adjust-overlap(anti-overlap, -max, side: 'max')\n      condition = condition + ' and (max-' + use-device-width + 'width: %s)' % (-max)\n    if orientation\n      condition = condition + ' and (orientation: %s)' % (orientation)\n    if density\n      conditions = ()\n      for query in -density-queries(density)\n        push(conditions, condition + ' and %s' % (query))\n      condition = join(', ', conditions)\n    @media condition\n      {block}\n  if fallback-class\n    +create-fallback-class(selected, fallback-class)\n      {block}\n\nat(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nfrom-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, length(rupture.scale), anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nabove = from-width\n\nto-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(1, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nbelow = to-width\n\nmobile(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +below(rupture.mobile-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ntablet(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(rupture.mobile-cutoff, rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndesktop(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nhd(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.hd-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndensity(density, orientation = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    conditions = ()\n    for query in -density-queries(density)\n      condition = 'only screen and %s' % (query)\n      if orientation\n        condition = condition + ' and (orientation: %s)' % (orientation)\n      push(conditions, condition)\n    condition = join(', ', conditions)\n    @media condition\n      {block}\n    if fallback-class\n      +create-fallback-class(selected, fallback-class)\n        {block}\n\npixel-ratio = density\n\nretina(orientation = null, fallback-class = null)\n  +density('retina', orientation, fallback-class)\n    {block}\n\nlandscape(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: landscape, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: landscape)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n\nportrait(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: portrait, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: portrait)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n",".card\n  position relative\n  background-color white\n  border 3px solid red\n  cursor pointer\n\n  // card sizing\n  cardSize(280)\n  +above('tablet')\n    cardSize(240)\n  +above('desktop')\n    cardSize(300)\n  +above('desktop+')\n    cardSize(280)\n\n  // card padding\n  margin 0 0 smallPadding 0\n  &:last-child\n    margin 0\n  +above('tablet')\n    margin 0 0 normalPading 0\n    &:nth-child(2n+1)\n      margin 0 0 normalPading normalPading\n  +at('desktop')\n    margin 0 0 smallPadding 0\n    &:nth-child(2n+1)\n      margin 0 0 smallPadding smallPadding\n\n  &__overlay\n    position absolute\n    top 0\n    left 0\n    bottom 0\n    right 0\n    display flex\n    justify-content center\n    align-items center\n    background-color white\n\n    &-title\n      color red\n      text-transform uppercase\n      font-size 28px\n      font-weight 800\n\n  &:hover\n    & .card__overlay\n      display none\n\n  &__giphy\n    pointer-events none\n    overflow hidden","content-container(padding = 15px)\n  max-width 1200px\n  margin 0 auto\n  padding 0 padding\n\ncardSize(width, aspectRatio = 1.5)\n  height = width / aspectRatio\n  height unit(height, px)\n  width unit(width, px)\n\ngrid(ratio, gutter = 20px)\n  width 'calc((99.99% + %s) * %s - %s)' % (gutter ratio gutter)\nleftColumn(ratio, gutter = 20px)\n  width 'calc((99.99% + %s) * %s - %s)' % (gutter ratio gutter)\nrightColumn(ratio, gutter = 20px)\n  width 'calc((99.99% + %s) * %s)' % (gutter ratio)",".header\n  padding normalPading smallPadding\n  display flex\n  justify-content center\n  align-items center\n  flex-direction column\n  background-color red\n  color white\n  +above('desktop')\n    padding 0\n    leftColumn(1/2)\n    position fixed\n    top 0\n    left 0\n    bottom 0\n  +above('desktop+')\n    leftColumn(2/5)\n\n.profile\n  background-color white\n  width 100px\n  height 100px\n  border-radius 50px\n  +above('tablet')\n    width 150px\n    height 150px\n    border-radius 75px\n  +above('desktop')\n    width 200px\n    height 200px\n    border-radius 100px\n\n.teaser\n  padding-top 16px\n  +above('tablet')\n    padding-top 24px\n  +above('desktop')\n    padding-top 40px\n\n.credits\n  font-size 13.5px\n  padding-top 12px\n  +above('tablet')\n    padding-top 20px",".content\n  padding 0 smallPadding\n  display flex\n  flex-wrap wrap\n  flex-direction row\n  justify-content center\n  +above('desktop')\n    padding 0\n    rightColumn(1/2)\n    position absolute\n    top 0\n    right 0\n    bottom 0\n  +above('desktop+')\n    rightColumn(3/5)\n\n.press-me\n  height 60px\n  width 100%\n  display flex\n  justify-content center\n  padding 20px 0\n  +above('desktop')\n    height 100px\n    padding 32px 0\n  &__image\n    height 100%"]}